<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>Go语言 - 标签 - </title>
    <link>http://runnerxjtu.github.com/blog/tags/golang/</link>
    <description>Go语言 - 标签 - </description>
    <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Sun, 16 Oct 2022 16:31:14 &#43;0800</lastBuildDate><atom:link href="http://runnerxjtu.github.com/blog/tags/golang/" rel="self" type="application/rss+xml" /><item>
  <title>【面试】后端面试题集03</title>
  <link>http://runnerxjtu.github.com/blog/posts/go%E8%AF%AD%E8%A8%80/%E9%9D%A2%E8%AF%95/%E5%90%8E%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%E9%9B%8603/</link>
  <pubDate>Sun, 16 Oct 2022 16:31:14 &#43;0800</pubDate>
  <author>作者</author>
  <guid>http://runnerxjtu.github.com/blog/posts/go%E8%AF%AD%E8%A8%80/%E9%9D%A2%E8%AF%95/%E5%90%8E%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%E9%9B%8603/</guid>
  <description><![CDATA[注意 本文内容来源于：【Github】后端面试题集 🧨 什么是channel，为什么它可以做到线程安全？ 展开查看详情 Channel是Go中的⼀个核⼼类型，可以把它看成⼀个管道，通过它并发核⼼单元就可以发送或者接收数据进⾏通讯(communication),Channel也可以理解是⼀个先进先出的队列，通过管道进⾏通信。
Golang的Channel,发送⼀个数据到Channel 和 从Channel接收⼀个数据 都是 原⼦性的。⽽且Go的设计思想就是:不要通过共享内存来通信，⽽是通过通信来共享内存，前者就是传统的加锁，后者就是Channel。也就是说，设计Channel的主要⽬的就是在多任务间传递数据的，这当然是安全的。
✨ 读写锁或者互斥锁读的时候能写吗? --查看答案-- 答案：Go中读写锁包括读锁和写锁，多个读线程可以同时访问共享数据；写线程必须等待所有读线程都释放锁以后，才能取得锁；同样的，读线程必须等待写线程释放锁后，才能取得锁，也就是说读写锁要确保的是如下互斥关系，可以同时读，但是读-写，写-写都是互斥的。 🎈 Channel是同步的还是异步的. 展开查看详情 Channel是异步进⾏的。
channel存在3种状态：
nil，未初始化的状态，只进⾏了声明，或者⼿动赋值为nil nil，未初始化的状态，只进⾏了声明，或者⼿动赋值为nil closed，已关闭，千万不要误认为关闭channel后，channel的值是nil 🎉 下列哪个类型可以使⽤ cap()函数？ A. array B. slice C. map D. channel --查看答案-- 答案：A B D；array 返回数组的元素个数；slice 返回 slice 的最⼤容量；channel 返回 channel 的容量； 🎊 Data Race问题怎么解决？能不能不加锁解决这个问题？ 展开查看详情 同步访问共享数据是处理数据竞争的⼀种有效的⽅法.golang在1.1之后引⼊了竞争检测机制，可以使⽤ go run -race 或者 go build -race来进⾏静态检测。 其在内部的实现是,开启多个协程执⾏同⼀个命令， 并且记录下每个变量的状态.
竞争检测器基于C/C++的ThreadSanitizer 运⾏时库，该库在Google内部代码基地和Chromium找到许多错误。这个技术在2012年九⽉集成到Go中，从那时开始，它已经在标准库中检测到42个竞争条件。现在，它已经是我们持续构建过程的⼀部分，当竞争条件出现时，它会继续捕捉到这些错误。
竞争检测器已经完全集成到Go⼯具链中，仅仅添加-race标志到命令⾏就使⽤了检测器。
$ go test -race mypkg // 测试包 $ go run -race mysrc.]]></description>
</item>
<item>
  <title>【面试】后端面试题集02</title>
  <link>http://runnerxjtu.github.com/blog/posts/go%E8%AF%AD%E8%A8%80/%E9%9D%A2%E8%AF%95/%E5%90%8E%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%E9%9B%8602/</link>
  <pubDate>Sun, 16 Oct 2022 15:55:37 &#43;0800</pubDate>
  <author>作者</author>
  <guid>http://runnerxjtu.github.com/blog/posts/go%E8%AF%AD%E8%A8%80/%E9%9D%A2%E8%AF%95/%E5%90%8E%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%E9%9B%8602/</guid>
  <description><![CDATA[注意 本文内容来源于：【Github】后端面试题集 🎆 说下Go中的锁有哪些?三种锁，读写锁，互斥锁，还有map的安全的锁? Go中的三种锁包括:互斥锁,读写锁,sync.Map的安全的锁.
互斥锁
Go并发程序对共享资源进⾏访问控制的主要⼿段，由标准库代码包中sync中的Mutex结构体表示。
//Mutex 是互斥锁， 零值是解锁的互斥锁， ⾸次使⽤后不得复制互斥锁。 type Mutex struct { state int32 sema uint32 } sync.Mutex包中的类型只有两个公开的指针⽅法Lock和Unlock。
//Locker表示可以锁定和解锁的对象。 type Locker interface { Lock() Unlock() } //锁定当前的互斥量 //如果锁已被使⽤，则调⽤goroutine //阻塞直到互斥锁可⽤。 func (m *Mutex) Lock() //对当前互斥量进⾏解锁 //如果在进⼊解锁时未锁定m，则为运⾏时错误。 //锁定的互斥锁与特定的goroutine⽆关。 //允许⼀个goroutine锁定Mutex然后安排另⼀个goroutine来解锁它。 func (m *Mutex) Unlock() 声明⼀个互斥锁：
var mutex sync.Mutex 不像C或Java的锁类⼯具，我们可能会犯⼀个错误：忘记及时解开已被锁住的锁，从⽽导致流程异常。但Go由于存在defer，所以此类问题出现的概率极低。关于defer解锁的⽅式如下：
var mutex sync.Mutex func Write() { mutex.Lock() defer mutex.Unlock() } 如果对⼀个已经上锁的对象再次上锁，那么就会导致该锁定操作被阻塞，直到该互斥锁回到被解锁状态.
ort ( &#34;fmt&#34; &#34;sync&#34; &#34;time&#34; ) func main() { var mutex sync.]]></description>
</item>
<item>
  <title>【面试】后端面试题集01</title>
  <link>http://runnerxjtu.github.com/blog/posts/go%E8%AF%AD%E8%A8%80/%E9%9D%A2%E8%AF%95/%E5%90%8E%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%E9%9B%8601/</link>
  <pubDate>Sat, 15 Oct 2022 23:24:40 &#43;0800</pubDate>
  <author>作者</author>
  <guid>http://runnerxjtu.github.com/blog/posts/go%E8%AF%AD%E8%A8%80/%E9%9D%A2%E8%AF%95/%E5%90%8E%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%E9%9B%8601/</guid>
  <description><![CDATA[注意 本文内容来源于：【Github】后端面试题集 🍦 关于整型切⽚的初始化，下⾯正确的是？ A. s := make([]int) B. s := make([]int, 0) C. s := make([]int, 5, 10) D. s := []int{1, 2, 3, 4, 5} --查看答案-- 答案：B C D 🍧 下列代码是否会触发异常？ func Test59(t *testing.T) { runtime.GOMAXPROCS(1) intChan := make(chan int, 1) stringChan := make(chan string, 1) intChan &lt;- 1 stringChan &lt;- &#34;hello&#34; select { case value := &lt;-intChan: fmt.Println(value) case value := &lt;-stringChan: panic(value) } } --查看答案-- 答案：不⼀定，当两个chan同时有值时，select 会随机选择⼀个可⽤通道做收发操作 🍨 关于channel的特性，下⾯说法正确的是？ A.]]></description>
</item>
<item>
  <title>【面试】Go常见面试题【由浅入深】2022版</title>
  <link>http://runnerxjtu.github.com/blog/posts/go%E8%AF%AD%E8%A8%80/%E9%9D%A2%E8%AF%95/go%E8%AF%AD%E8%A8%80%E9%9D%A2%E8%AF%95%E9%A2%98/</link>
  <pubDate>Thu, 13 Oct 2022 20:36:11 &#43;0800</pubDate>
  <author>作者</author>
  <guid>http://runnerxjtu.github.com/blog/posts/go%E8%AF%AD%E8%A8%80/%E9%9D%A2%E8%AF%95/go%E8%AF%AD%E8%A8%80%E9%9D%A2%E8%AF%95%E9%A2%98/</guid>
  <description><![CDATA[注意 本文内容来源于：【知乎】Go常见面试题【由浅入深】2022版 🍇 = 和 := 的区别 --查看答案-- =是赋值变量，:=是定义变量 🍈 指针的作用 展开查看详情 获取变量的值 import fmt func main(){ a := 1 p := &amp;a // 获取地址 fmt.Prinf(*p) // 获取值 } 改变变量的值 // 交换函数 func swap(a,b *int){ *a,*b = *b,*a; } 用指针替代传入函数 type A struct{} func (a *A) fun(){} 🍉 Go有异常类型吗 展开查看详情 有。 Go用error类型代替try&hellip;catch
_,err := funcDemo() if err != nil { fmt.Println(err) return } 也可以用errors.New()来定义自己的异常。
type errorString struct { s string } func (e *errorString) Error() string { return e.]]></description>
</item>
</channel>
</rss>
